
upstream frontend {
    # case1) round-robin, default mode. 순서대로 돌아가면서 전달.
    # load balancing: localhost:8080으로 접속하게 되면 내부적으로 로드밸런싱을 거쳐 localhost:3000, locahost:3001로 이동하게 된다
    # server frontend-a:3000 weight=2 max_fails=3 fail_timeout=10s;
    # server frontend-b:3001 weight=1 max_fails=3 fail_timeout=10s;

    # A. weighted load balancing 
    # weight: 2로 설정하면 그렇지 않은 서버에 비해 2배로 더 많이 할당. default = 1
    
    # B. health check related
        # max_fails: n으로 지정된 횟수만큼 실패가 일어나면 서버가 죽은 것으로 간주
        # max_timeout: max_fails가 지정된 상태에서 이 값이 설정만큼 서버가 응답하지 않으면 죽은 것으로 간주
        # backup: 모든 서버가 죽었을 때, backup으로 표시된 서버가 사용되고, 그 전 까지는 사용되지 않는다.
        
        # max_conns=number -> limits maximum users of simultaneous active connection
        # down -> mark this server is unavailable

    # C. cache related
        # keepalive: memcache 같은거 쓸 때, 


    # case2) least_connected: 커넥션이 가장 적은 서버로 할당 
    least_conn;
    server frontend-a:3000 max_fails=3 fail_timeout=10s;
    server frontend-b:3001 max_fails=3 fail_timeout=10s;
    server frontend-c:3002 backup;
}

server {
    listen 80;
    server_name localhost;

    location / {        
        proxy_pass http://frontend;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
    }

    # location /sockjs-node {
    #     proxy_pass http://host.docker.internal;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "Upgrade";
    # }

}