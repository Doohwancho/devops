
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

upstream frontend {
    # case1) round-robin, default mode. 순서대로 돌아가면서 전달.
    # load balancing: localhost:8080으로 접속하게 되면 내부적으로 로드밸런싱을 거쳐 localhost:3000, locahost:3001로 이동하게 된다
    # server frontend-a:3000 weight=2 max_fails=3 fail_timeout=10s;
    # server frontend-b:3001 weight=1 max_fails=3 fail_timeout=10s;

    # A. weighted load balancing 
    # weight: 2로 설정하면 그렇지 않은 서버에 비해 2배로 더 많이 할당. default = 1
    
    # B. health check related
        # max_fails: n으로 지정된 횟수만큼 실패가 일어나면 서버가 죽은 것으로 간주
        # max_timeout: max_fails가 지정된 상태에서 이 값이 설정만큼 서버가 응답하지 않으면 죽은 것으로 간주
        # backup: 모든 서버가 죽었을 때, backup으로 표시된 서버가 사용되고, 그 전 까지는 사용되지 않는다.
        
        # max_conns=number -> limits maximum users of simultaneous active connection
        # down -> mark this server is unavailable

    # C. cache related
        # keepalive: memcache 같은거 쓸 때, 


    # case2) least_connected: 커넥션이 가장 적은 서버로 할당 
    least_conn;
    server frontend-a:3000 max_fails=3 fail_timeout=10s;
    server frontend-b:3001 max_fails=3 fail_timeout=10s;
    server frontend-c:3002 backup;
}

upstream backend {
    least_conn; 
    server backend-a:8080 max_fails=3 fail_timeout=10s;
    server backend-b:8081 max_fails=3 fail_timeout=10s;
    server backend-c:8082 backup;
}


server {
    listen 80;
    listen [::]:80;

    server_name localhost;

    location / {        
        proxy_pass http://frontend;

        proxy_http_version 1.1; # 프록시를 위한 HTTP 프로토콜 버전을 정의합니다. 기본적으로 1.0으로 설정됩니다. 웹 소켓 및 활성 연결을 유지하려면 버전 1.1을 사용해야 합니다.
        proxy_set_header Upgrade $http_upgrade; # 응용프로그램이 웹 소켓을 사용하는 경우 헤더 필드가 필요합니다.
        proxy_set_header Connection 'upgrade'; # 응용프로그램이 웹 소켓을 사용하는 경우 헤더 필드가 필요합니다.
        proxy_set_header Host $host;  # 클라이언트가 요청한 원래 호스트를 정의합니다.
        # proxy_set_header X-Real-IP $remote_addr; # 실제 방문자 원격 IP 주소를 프록시 서버로 전달합니다.
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_set_header X-Forwarded-Host  $host;
        # proxy_set_header X-Forwarded-Port  $server_port;
        # proxy_set_header X-NginX-Proxy true;        
        # proxy_cache_bypass $http_upgrade; # 캐시에서 응답을 가져오지 않을 조건을 설정한다. (웹소켓 캐싱 제한)
    }

    location /book {        
        proxy_pass http://backend;

        proxy_http_version 1.1; # 프록시를 위한 HTTP 프로토콜 버전을 정의합니다. 기본적으로 1.0으로 설정됩니다. 웹 소켓 및 활성 연결을 유지하려면 버전 1.1을 사용해야 합니다.
        proxy_set_header Upgrade $http_upgrade; # 응용프로그램이 웹 소켓을 사용하는 경우 헤더 필드가 필요합니다.
        proxy_set_header Connection 'upgrade'; # 응용프로그램이 웹 소켓을 사용하는 경우 헤더 필드가 필요합니다.
        proxy_set_header Host $host;  # 클라이언트가 요청한 원래 호스트를 정의합니다.
        # proxy_set_header X-Real-IP $remote_addr; # 실제 방문자 원격 IP 주소를 프록시 서버로 전달합니다.
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_set_header X-Forwarded-Host  $host;
        # proxy_set_header X-Forwarded-Port  $server_port;
        # proxy_set_header X-NginX-Proxy true;        
        # proxy_cache_bypass $http_upgrade; # 캐시에서 응답을 가져오지 않을 조건을 설정한다. (웹소켓 캐싱 제한)

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }


    # location ~ \.(gif|jpg|png)$ { # static file용 
    #     root /data/images;
    # }

    # location /sockjs-node { # react의 https 검증용
    #     proxy_pass http://frontend;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $connection_upgrade;
    #     proxy_set_header Host $host;
    # }

}




# server { # Q. 백엔드는 소켓을 따로 둬서 관리할 수도 있지 않을까?
#     listen 8080;
#     listen [::]:8080;

#     server_name localhost; 


#     location / {        
#         proxy_pass http://backend;

#         proxy_http_version 1.1;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host; 
#         proxy_cache_bypass $http_upgrade;
#         proxy_set_header X-NginX-Proxy true;

#         add_header 'Access-Control-Allow-Origin' '*';
#         add_header 'Access-Control-Allow-Credentials' 'true';
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
#         add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
#     }

# }